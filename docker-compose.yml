# volumes is used to store our data, because when shutdown container will lose all pur data

version: "3.8"
services:

  # Node 
  node:
    build:
      context: .
      target: node
    volumes:
      - .:/usr/src
      - ./node_modules:/usr/src/node_modules
    tty: true

  # PHP/Laravel Service
  php:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=app
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis

  # Websocket Service
  websocket:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=websocket
    working_dir: /var/www
    volumes:
      - ./:/var/www
    ports:
      - "6001:6001"
    depends_on:
      - database
      - redis

  # Database server
  database:
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD="yes" # for empty pw
      # Uncomment and set the following variables if needed:
      # - MYSQL_DATABASE=${DB_DATABASE}
      # - MYSQL_USER=${DB_USERNAME}
      # - MYSQL_PASSWORD=${DB_PASSWORD}
      # - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/mysql # location for store the data

  # Redis Server
  redis:
    image: redis:alpine
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"

  # Queue server
  queue:
    build:
      context: .
      target: php
      args:
        - APP_ENV=${APP_ENV}
    environment:
      - APP_ENV=${APP_ENV}
      - CONTAINER_ROLE=queue
    working_dir: /var/www
    volumes:
      - ./:/var/www

volumes:
  db-data: ~

# docker-compose up -d  --- to run this file and create container
# docker-compose down ---- to end container
# docker-compose ps -------za da se vidi koi containers se startuvani
# docker-compose logs php -- za da se vidat greskite na php containerot 
# chmod +x Docker/entrypoint.sh
# docker-compose build php -- za rebuild na image
